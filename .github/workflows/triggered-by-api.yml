name: API Trigger
run-name: ${{ github.actor }} is checking for new release version
on:
  push:
  pull_request:
  workflow_dispatch:
    inputs:
      IS_RELEASE:
        required: true
        type: boolean
      VERSION:
        required: true

env:
  VERSIONS_LOCATION: "examples/resources/versions/"
jobs:
  createWorld:
    runs-on: ubuntu-latest
    permissions: write-all
    if: ${{ github.event.inputs.VERSION != null && github.event.inputs.IS_RELEASE != null }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Get last version
        run: echo "LAST_VERSION=$(curl -sSL "https://piston-meta.mojang.com/mc/game/version_manifest.json" | jq -cr '[.versions[] | select(.type == "release")] [1] .id')" >> $GITHUB_ENV

      - name: Delete latest version folder
        run: rm -r ${{ env.VERSIONS_LOCATION }}latest

      - name: Copy last version into latest folder
        run: cp -R ${{ env.VERSIONS_LOCATION }}${{ env.LAST_VERSION }} ${{ env.VERSIONS_LOCATION }}latest

      - name: Start server
        run: docker run --ip 172.17.0.2 --name mc -e EULA=TRUE -e UID="$(id -u)" -e VERSION=${{ github.event.inputs.VERSION }} -e ENABLE_AUTOSTOP=TRUE -e AUTOSTOP_TIMEOUT_INIT=5 -e MEMORY=8G -v "$GITHUB_WORKSPACE"/${{ env.VERSIONS_LOCATION }}latest itzg/minecraft-server:latest --forceUpgrade

      - name: Copy upgraded world into version folder
        run: cp -R ${{ env.VERSIONS_LOCATION }}latest ${{ env.VERSIONS_LOCATION }}${{ github.event.inputs.VERSION }}

      - if: ${{ github.event.inputs.IS_RELEASE == 'true' }}
        uses: EndBug/add-and-commit@v9
        with:
          add: ./${{ env.VERSIONS_LOCATION }}${{ github.event.inputs.VERSION }}/*
          message: 'add latest Minecraft world'
          push: true

      - if: ${{ github.event.inputs.IS_RELEASE == 'false' }}
        uses: EndBug/add-and-commit@v9
        with:
          add: ./${{ env.VERSIONS_LOCATION }}${{ github.event.inputs.VERSION }}/*
          new_branch: snapshots
          message: 'add latest Minecraft world'
          push: true

  tests:
    runs-on: ubuntu-latest
    needs:
      - createWorld

    strategy:
      matrix:
        php-version: [ '8.0', '8.1', '8.2' ]

    name: Run tests on PHP v${{ matrix.php-version }}

    if: always()

    steps:
      - if: ${{ github.event.inputs.RELEASE == 'true' || github.event.inputs.RELEASE == null }}
        name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: master

      - if: ${{ github.event.inputs.RELEASE == 'false' }}
        name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: snapshots

      - name: Show resource folder
        run: tree ${{ env.VERSIONS_LOCATION }}

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}

      - name: Set composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Restore composer from cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Update composer
        run: composer update

      - name: Install composer dependencies
        run: composer install --no-interaction --prefer-dist --no-progress

      - name: Run phpunit tests
        run: vendor/bin/phpunit --colors=always --testdox

      - if: ${{ github.event.inputs.RELEASE == 'false' }}
        name: Delete snapshot branch
        run: git push origin --delete snapshots